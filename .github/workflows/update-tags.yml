name: Auto-update Docker Image Tags

# This workflow runs on every push to the 'main' branch
on:
  push:
    branches: [ main ]
    # It only runs if files inside these specific component folders have changed
    paths:
      - 'ai_job/**'
      - 'ai_trigger/**'
      - 'collector_dispatcher/**'
      - 'collector_job/**'

jobs:
  update-env-file:
    runs-on: ubuntu-latest
    # Grant permissions for the workflow to write back to the repository
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Fetch latest tags and update .example.env
        run: |
          # --- Configuration ---
          # Your Docker Hub username, taken from the secret for consistency
          DOCKER_USER="${{ secrets.DOCKERHUB_USERNAME }}"

          # Mapping of ENV variable names to Docker Hub repository names
          declare -A REPO_MAP
          REPO_MAP["DOCKER_COLLECTOR_DISPATCH"]="job-scout-dispatch"
          REPO_MAP["DOCKER_AI_DISPATCH"]="job-scout-ai-trigger"
          REPO_MAP["DOCKER_AI_JOB"]="job-scout-ai"
          REPO_MAP["DOCKER_COLLECTOR_JOB"]="job-scout-collector-job"

          echo "Fetching latest tags from Docker Hub for user: $DOCKER_USER"

          # --- Logic ---
          for ENV_VAR in "${!REPO_MAP[@]}"; do
            REPO_NAME="${REPO_MAP[$ENV_VAR]}"
            
            echo "Querying repository: $REPO_NAME..."
            
            # Use the Docker Hub API to get the most recently updated tag
            LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${DOCKER_USER}/${REPO_NAME}/tags/?page_size=1&ordering=last_updated" | jq -r '.results[0].name')

            if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
              echo "::warning:: Could not find any tags for ${DOCKER_USER}/${REPO_NAME}. Skipping update for ${ENV_VAR}."
            else
              echo "Found latest tag for ${REPO_NAME}: ${LATEST_TAG}"
              
              # Use sed to replace the line in the .example.env file
              # The `^` ensures we only match at the beginning of a line
              sed -i "s|^${ENV_VAR}=.*|${ENV_VAR}=${DOCKER_USER}/${REPO_NAME}:${LATEST_TAG}|" .example.env
              echo "Updated ${ENV_VAR} in .example.env"
            fi
          done

      - name: Commit and push changes
        run: |
          # Configure git with the Actions bot user
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Check if there are any changes to commit
          if ! git diff --quiet .example.env; then
            echo "Changes detected in .example.env. Committing and pushing..."
            git add .example.env
            git commit -m "ci: Auto-update Docker image tags in .example.env"
            git push
          else
            echo "No changes to .example.env. Nothing to commit."
          fi